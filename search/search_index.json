{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Includes here is documentation for a set of PowerShell scripts for use with FSLogix Profile Container, Office 3656 Container and App Masking found in the fslogix repository.","title":"Introduction"},{"location":"#introduction","text":"Includes here is documentation for a set of PowerShell scripts for use with FSLogix Profile Container, Office 3656 Container and App Masking found in the fslogix repository.","title":"Introduction"},{"location":"applicationkeys/","text":"Creating FSLogix App Masking rules \u00b6 Scripts here can be used to gather information on applications for creating rule sets for App Masking & Java Control. Get-ApplicationRegistryKey.ps1 returns Registry keys from well known locations that contain application information to return application keys for App Masking rules. An example use case for this would be determining specific locations for an application in a suite with shared components (e.g. Visio, Project or Skype for Business as a part of Office 365 ProPlus). Install the Script \u00b6 There are two methods for installing the script: Install from the PowerShell Gallery . This is the preferred method as the installation can be handled directly from Windows PowerShell or PowerShell Core with the following command: Install-Script -Name Get-ApplicationRegistryKey Download from the repository . Get-ApplicationRegistryKey.ps1 can be downloaded directly from this repository and saved to a preferred location. Usage \u00b6 The following example will find keys related to Microsoft Visio . .\\ Get-ApplicationRegistryKey . ps1 -SearchString \"Visio\" The value for SearchString can be passed to Get-ApplicationRegistryKey.ps1 via the pipeline. To search for Registry keys specific to Visio and Project by passing strings to Get-ApplicationRegistryKey.ps1 via the pipeline, use: C :\\> \"Visio\" , \"Project\" | .\\ Get-ApplicationRegistryKey . ps1 To search for Registry keys specific to Adobe Reader or Acrobat: C :\\> .\\ Get-ApplicationRegistryKey . ps1 -SearchString \"Adobe\" To search for Registry keys specific to Visio and Project: C :\\> .\\ Get-ApplicationRegistryKey . ps1 -SearchString \"Visio\" , \"Project\" To search for Registry keys specific to Skype for Business: C :\\> .\\ Get-ApplicationRegistryKey . ps1 -SearchString \"Skype\" A list of Registry keys can be passed to Get-ApplicationRegistryKey.ps1 on the pipeline from an object with a Key property. For example, consider an object named $List that has a set of Registry paths in a property named Key : C :\\> $List Title Key ----- --- Path HKLM :\\ SOFTWARE \\ Classes \\ CLSID Path HKLM :\\ SOFTWARE \\ Classes This object can be passed to Get-ApplicationRegistryKey.ps1 on the pipeline as per the following example: $List | .\\ Get-ApplicationRegistryKey . ps1 -Verbose -SearchString \"Visio\" In each case, the script will output a list of keys, similar to the list below, that can then be validated and used in an App Masking ruleset: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Icad.ViewerDrawing HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ms-visio HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ShapewareVISIO10 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ShapewareVISIO20 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.3 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.4 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.5 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.6 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.CustomUI.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.3 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.4 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.5 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.6 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.DrawingMacroEnabled HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.DrawingMacroEnabled.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.ExtendedData HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.InvisibleApp HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.InvisibleApp.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Stencil.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Stencil.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.StencilMacroEnabled.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Template.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Template.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.TemplateMacroEnabled.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.TemplatePackage.16 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.WebDrawing.14 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Workspace.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioBridger.Loader HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioSGFS.Engine HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioSGProv.Provider HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewer.Viewer HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewer.Viewer.1 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplay.VisioViewerDWGDisplay HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplay.VisioViewerDWGDisplay.1 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplayCreator.VisioViewerDWGDisplayCreator HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplayCreator.VisioViewerDWGDisplayCreator.1 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisOcx.DrawingControl HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisOcx.DrawingControl.1","title":"App Masking"},{"location":"applicationkeys/#creating-fslogix-app-masking-rules","text":"Scripts here can be used to gather information on applications for creating rule sets for App Masking & Java Control. Get-ApplicationRegistryKey.ps1 returns Registry keys from well known locations that contain application information to return application keys for App Masking rules. An example use case for this would be determining specific locations for an application in a suite with shared components (e.g. Visio, Project or Skype for Business as a part of Office 365 ProPlus).","title":"Creating FSLogix App Masking rules"},{"location":"applicationkeys/#install-the-script","text":"There are two methods for installing the script: Install from the PowerShell Gallery . This is the preferred method as the installation can be handled directly from Windows PowerShell or PowerShell Core with the following command: Install-Script -Name Get-ApplicationRegistryKey Download from the repository . Get-ApplicationRegistryKey.ps1 can be downloaded directly from this repository and saved to a preferred location.","title":"Install the Script"},{"location":"applicationkeys/#usage","text":"The following example will find keys related to Microsoft Visio . .\\ Get-ApplicationRegistryKey . ps1 -SearchString \"Visio\" The value for SearchString can be passed to Get-ApplicationRegistryKey.ps1 via the pipeline. To search for Registry keys specific to Visio and Project by passing strings to Get-ApplicationRegistryKey.ps1 via the pipeline, use: C :\\> \"Visio\" , \"Project\" | .\\ Get-ApplicationRegistryKey . ps1 To search for Registry keys specific to Adobe Reader or Acrobat: C :\\> .\\ Get-ApplicationRegistryKey . ps1 -SearchString \"Adobe\" To search for Registry keys specific to Visio and Project: C :\\> .\\ Get-ApplicationRegistryKey . ps1 -SearchString \"Visio\" , \"Project\" To search for Registry keys specific to Skype for Business: C :\\> .\\ Get-ApplicationRegistryKey . ps1 -SearchString \"Skype\" A list of Registry keys can be passed to Get-ApplicationRegistryKey.ps1 on the pipeline from an object with a Key property. For example, consider an object named $List that has a set of Registry paths in a property named Key : C :\\> $List Title Key ----- --- Path HKLM :\\ SOFTWARE \\ Classes \\ CLSID Path HKLM :\\ SOFTWARE \\ Classes This object can be passed to Get-ApplicationRegistryKey.ps1 on the pipeline as per the following example: $List | .\\ Get-ApplicationRegistryKey . ps1 -Verbose -SearchString \"Visio\" In each case, the script will output a list of keys, similar to the list below, that can then be validated and used in an App Masking ruleset: HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Icad.ViewerDrawing HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ms-visio HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ShapewareVISIO10 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\ShapewareVISIO20 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.3 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.4 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.5 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Application.6 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.CustomUI.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.3 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.4 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.5 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Drawing.6 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.DrawingMacroEnabled HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.DrawingMacroEnabled.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.ExtendedData HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.InvisibleApp HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.InvisibleApp.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Stencil.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Stencil.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.StencilMacroEnabled.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Template.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Template.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.TemplateMacroEnabled.15 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.TemplatePackage.16 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.WebDrawing.14 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Visio.Workspace.11 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioBridger.Loader HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioSGFS.Engine HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioSGProv.Provider HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewer.Viewer HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewer.Viewer.1 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplay.VisioViewerDWGDisplay HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplay.VisioViewerDWGDisplay.1 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplayCreator.VisioViewerDWGDisplayCreator HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisioViewerDWGDisplayCreator.VisioViewerDWGDisplayCreator.1 HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisOcx.DrawingControl HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\VisOcx.DrawingControl.1","title":"Usage"},{"location":"containercleanup/","text":"Container Cleanup script \u00b6 Warning This script will DELETE target files and folders. Be certain that the targets listed in the XML are OK to be removed. Test and test again before putting the script into production. Profile Capacity Management \u00b6 A full discussion on managing Profile Container size can be found in this article: A Practical Guide to FSLogix Containers Capacity Planning and Maintenance . About Remove-ContainerData.ps1 \u00b6 Remove-ContainerData is used to delete files and folders in a user's FSLogix Profile Container by mounting the Container and pruning files, thus keeping the Container size to a minimum. The script reads an XML file that defines a list of files and folders to remove from the Container. Actions on a target path can be: Prune - the XML can include a number that defines the age in days for last write that the file must be older than to be deleted. Essentially reducing the size of the folder. Delete - the target path will be deleted. Where the administrator may want to remove a target path, the Delete action will delete the entire folder. Trim - where the target path contains sub-folders, this action will remove all sub-folders except for the newest folder. Supports -WhatIf and -Verbose output and returns a list of files removed from the profile. Add -Verbose will output the total size of files removed from the user profile and processing time at the end of the script. All targets (files / folders) that are deleted, will be logged to a file. Deleting files from the Container can potentially result in data loss, so testing is advised and the use of -Confirm:$false is required for the script perform a delete. This script depends on the following PowerShell modules: ActiveDirectory - Installed as a feature in Windows Server or via RSAT Hyper-V - Installed as a feature in Windows Server or via RSAT Fslogix.Powershell.Disk - this module is found here: https://github.com/aaronparker/fslogix/tree/main/Modules/Fslogix.Powershell.Disk Remove-ContainerData.ps1 and supporting files are available on in the repository on GitHub . Usage \u00b6 .\\ Remove-ContainerData . ps1 -Path \\\\ server \\ FSLogixContainer -Targets .\\ targets . xml Running Remove-ContainerData.ps1 \u00b6 Remove-ContainerData.ps1 must be run outside the user session when Profile Containers are not in use. The script will require exclusive access to the Container to mount it with read/write access. Remove-ContainerData.ps1 could be run as a schedule task outside of business hours from a management host.","title":"Container Cleanup"},{"location":"containercleanup/#container-cleanup-script","text":"Warning This script will DELETE target files and folders. Be certain that the targets listed in the XML are OK to be removed. Test and test again before putting the script into production.","title":"Container Cleanup script"},{"location":"containercleanup/#profile-capacity-management","text":"A full discussion on managing Profile Container size can be found in this article: A Practical Guide to FSLogix Containers Capacity Planning and Maintenance .","title":"Profile Capacity Management"},{"location":"containercleanup/#about-remove-containerdataps1","text":"Remove-ContainerData is used to delete files and folders in a user's FSLogix Profile Container by mounting the Container and pruning files, thus keeping the Container size to a minimum. The script reads an XML file that defines a list of files and folders to remove from the Container. Actions on a target path can be: Prune - the XML can include a number that defines the age in days for last write that the file must be older than to be deleted. Essentially reducing the size of the folder. Delete - the target path will be deleted. Where the administrator may want to remove a target path, the Delete action will delete the entire folder. Trim - where the target path contains sub-folders, this action will remove all sub-folders except for the newest folder. Supports -WhatIf and -Verbose output and returns a list of files removed from the profile. Add -Verbose will output the total size of files removed from the user profile and processing time at the end of the script. All targets (files / folders) that are deleted, will be logged to a file. Deleting files from the Container can potentially result in data loss, so testing is advised and the use of -Confirm:$false is required for the script perform a delete. This script depends on the following PowerShell modules: ActiveDirectory - Installed as a feature in Windows Server or via RSAT Hyper-V - Installed as a feature in Windows Server or via RSAT Fslogix.Powershell.Disk - this module is found here: https://github.com/aaronparker/fslogix/tree/main/Modules/Fslogix.Powershell.Disk Remove-ContainerData.ps1 and supporting files are available on in the repository on GitHub .","title":"About Remove-ContainerData.ps1"},{"location":"containercleanup/#usage","text":".\\ Remove-ContainerData . ps1 -Path \\\\ server \\ FSLogixContainer -Targets .\\ targets . xml","title":"Usage"},{"location":"containercleanup/#running-remove-containerdataps1","text":"Remove-ContainerData.ps1 must be run outside the user session when Profile Containers are not in use. The script will require exclusive access to the Container to mount it with read/write access. Remove-ContainerData.ps1 could be run as a schedule task outside of business hours from a management host.","title":"Running Remove-ContainerData.ps1"},{"location":"profilecleanup/","text":"Profile Cleanup script \u00b6 Warning This script will DELETE target files and folders. Be certain that the targets listed in the XML are OK to be removed. Test and test again before putting the script into production. Profile Capacity Management \u00b6 A full discussion on managing Profile Container size can be found in this article: A Practical Guide to FSLogix Containers Capacity Planning and Maintenance . About Remove-ProfileData.ps1 \u00b6 Remove-ProfileData.ps1 is used to delete files and folders in the user profile to reduce profile size, thus keeping Profile Containers sizes to a minimum. The script runs within the user session and reads an XML file that defines a list of files and folders to remove from the profile. Actions on a target path can be: Prune - the XML can include a number that defines the age in days for last write that the file must be older than to be deleted. Essentially reducing the size of the folder. Delete - the target path will be deleted. Where the administrator may want to remove a target path, the Delete action will delete the entire folder. Trim - where the target path contains sub-folders, this action will remove all sub-folders except for the newest folder. Supports -WhatIf and -Verbose output and returns a list of files removed from the profile. Add -Verbose will output the total size of files removed from the user profile and processing time at the end of the script. All targets (files / folders) that are deleted, will be logged to a file. Deleting files from the profile can potentially result in data loss, so testing is advised and the use of -Confirm:$False is required for the script perform a delete. Remove-ProfileData.ps1 and supporting files are available on in the repository on GitHub . Usage \u00b6 To enable the script to report on what would be removed from user's profile, the following example command would be run in the user's context: .\\ Remove-ProfileData . ps1 -Targets .\\ targets . xml -WhatIf To enable the script to clean up the user's profile, the following example command would be run: .\\ Remove-ProfileData . ps1 -Targets .\\ targets . xml -Confirm : $False The age of files specified in the XML can be overridden with the -Override switch. This will remove files of any ages as specificed in the XML targets file. .\\ Remove-ProfileData . ps1 -Targets .\\ targets . xml -Confirm : $False -Override By default, logs are kept for files that are deleted in %LocalAppData% and up to 30 logs will be kept. This number can be changed with the -KeepLog parameter. .\\ Remove-ProfileData . ps1 -Targets .\\ targets . xml -Confirm : $False -LogPath $env:AppData -KeepLog 7 Running Remove-ProfileData.ps1 \u00b6 Remove-ProfileData.ps1 is be run in the user session which could be done in several ways: A logon script - the script can be run to prune the user profile during login; however, consider potential login storms and impacts on IO and CPU A scheduled task - configure Windows Task Scheduler to run the script as the logged on user. Consider using task schedule trigger and condition properties to stagger the task across multiple users or desktop A logoff script - run the script during user logoff where applications are typically closed and user logoff actions are likely to be staggered Group Policy Logon / Logoff \u00b6 To run Remove-ProfileData.ps1 in a Group Policy login or logoff script action, create a new GPO (or edit an existing GPO) to add Remove-ProfileData.ps1 as a script. Open the User Configuration / Policies / Windows Settings / Scripts (Logon/Logoff) node. Edit either Logon or Logoff Click the PowerShell Scripts tab and click the Show Files button. Copy Remove-ProfileData.ps1 into the location displayed in Explorer. Edit Remove-ProfileData.ps1 and make the following changes: Remove ConfirmImpact = 'High' (approximately line 49, starting with CmdletBinding ) Change Mandatory = $True to Mandatory = $False for the Targets parameter (approximately line 53) Copy Targets.xml to a central location. The NETLOGON share is a good candidate to ensure that the file is available centrally Add Remove-ProfileData.ps1 as a script with the -Targets parameter (e.g. -Targets \"\\\\home.stealthpuppy.com\\NETLOGON\\ProfileTargets.xml\" ) Link the GPO to an organisational unit containing target user accounts (or use where the GPO is linked to a computer OU with Loopback enabled).","title":"Profile Cleanup"},{"location":"profilecleanup/#profile-cleanup-script","text":"Warning This script will DELETE target files and folders. Be certain that the targets listed in the XML are OK to be removed. Test and test again before putting the script into production.","title":"Profile Cleanup script"},{"location":"profilecleanup/#profile-capacity-management","text":"A full discussion on managing Profile Container size can be found in this article: A Practical Guide to FSLogix Containers Capacity Planning and Maintenance .","title":"Profile Capacity Management"},{"location":"profilecleanup/#about-remove-profiledataps1","text":"Remove-ProfileData.ps1 is used to delete files and folders in the user profile to reduce profile size, thus keeping Profile Containers sizes to a minimum. The script runs within the user session and reads an XML file that defines a list of files and folders to remove from the profile. Actions on a target path can be: Prune - the XML can include a number that defines the age in days for last write that the file must be older than to be deleted. Essentially reducing the size of the folder. Delete - the target path will be deleted. Where the administrator may want to remove a target path, the Delete action will delete the entire folder. Trim - where the target path contains sub-folders, this action will remove all sub-folders except for the newest folder. Supports -WhatIf and -Verbose output and returns a list of files removed from the profile. Add -Verbose will output the total size of files removed from the user profile and processing time at the end of the script. All targets (files / folders) that are deleted, will be logged to a file. Deleting files from the profile can potentially result in data loss, so testing is advised and the use of -Confirm:$False is required for the script perform a delete. Remove-ProfileData.ps1 and supporting files are available on in the repository on GitHub .","title":"About Remove-ProfileData.ps1"},{"location":"profilecleanup/#usage","text":"To enable the script to report on what would be removed from user's profile, the following example command would be run in the user's context: .\\ Remove-ProfileData . ps1 -Targets .\\ targets . xml -WhatIf To enable the script to clean up the user's profile, the following example command would be run: .\\ Remove-ProfileData . ps1 -Targets .\\ targets . xml -Confirm : $False The age of files specified in the XML can be overridden with the -Override switch. This will remove files of any ages as specificed in the XML targets file. .\\ Remove-ProfileData . ps1 -Targets .\\ targets . xml -Confirm : $False -Override By default, logs are kept for files that are deleted in %LocalAppData% and up to 30 logs will be kept. This number can be changed with the -KeepLog parameter. .\\ Remove-ProfileData . ps1 -Targets .\\ targets . xml -Confirm : $False -LogPath $env:AppData -KeepLog 7","title":"Usage"},{"location":"profilecleanup/#running-remove-profiledataps1","text":"Remove-ProfileData.ps1 is be run in the user session which could be done in several ways: A logon script - the script can be run to prune the user profile during login; however, consider potential login storms and impacts on IO and CPU A scheduled task - configure Windows Task Scheduler to run the script as the logged on user. Consider using task schedule trigger and condition properties to stagger the task across multiple users or desktop A logoff script - run the script during user logoff where applications are typically closed and user logoff actions are likely to be staggered","title":"Running Remove-ProfileData.ps1"},{"location":"profilecleanup/#group-policy-logon-logoff","text":"To run Remove-ProfileData.ps1 in a Group Policy login or logoff script action, create a new GPO (or edit an existing GPO) to add Remove-ProfileData.ps1 as a script. Open the User Configuration / Policies / Windows Settings / Scripts (Logon/Logoff) node. Edit either Logon or Logoff Click the PowerShell Scripts tab and click the Show Files button. Copy Remove-ProfileData.ps1 into the location displayed in Explorer. Edit Remove-ProfileData.ps1 and make the following changes: Remove ConfirmImpact = 'High' (approximately line 49, starting with CmdletBinding ) Change Mandatory = $True to Mandatory = $False for the Targets parameter (approximately line 53) Copy Targets.xml to a central location. The NETLOGON share is a good candidate to ensure that the file is available centrally Add Remove-ProfileData.ps1 as a script with the -Targets parameter (e.g. -Targets \"\\\\home.stealthpuppy.com\\NETLOGON\\ProfileTargets.xml\" ) Link the GPO to an organisational unit containing target user accounts (or use where the GPO is linked to a computer OU with Loopback enabled).","title":"Group Policy Logon / Logoff"},{"location":"redirectionsxml/","text":"FSLogix Profile Containers Redirections \u00b6 A list of folder redirections for use with FSLogix Profile Containers and a method for generating the list in the expected XML format. See Controlling the Content of the Profile Container for more details. The list of redirections ( Redirections.csv ) is hosted here in CSV format so that it can be rendered in a table when viewed on GitHub and to simplify adding to or updating the list. Test Before Implementing in Production \u00b6 Redirections.csv is not a definitive list of paths to exclude or include in the Profile Container. You should assess each of the paths included in this list for your environment and understand whether a path should be excluded or cleaned up with alternative methods . It is likely that additional paths can be added to the list. With community feedback, this list can be improved. It is also important to understand the performance impacts of implementing exclusions for Profile Containers. Ensure that the redirections.xml that you implement in your environment is well tested before moving into production. Install the Script \u00b6 There are two methods for installing the script: Install from the PowerShell Gallery . This is the preferred method as the installation can be handled directly from Windows PowerShell or PowerShell Core with the following command: Install-Script -Name ConvertTo-RedirectionsXml Download from the repository . ConvertTo-RedirectionsXml.ps1 can be downloaded directly from this repository and saved to a preferred location. Usage \u00b6 ConvertTo-RedirectionsXml is used to convert the CSV list into the correct XML format for use with Profile Containers. This script will read the Redirections.csv from GitHub repo and output Redirections.xml locally for use with Profile Containers. To output Redirections.xml to the current folder, just run the script without arguments. ConvertTo-RedirectionsXml A custom path can be provided for the output file - for example, the following command will output the file to C:\\Temp\\Redirections.xml : ConvertTo-RedirectionsXml -OutFile C :\\ Temp \\ Redirections . xml If you have saved the script locally instead of installing from the PowerShell Gallery, remember to run the script with the correct syntax: .\\ ConvertTo-RedirectionsXml . ps1 How To Contribute \u00b6 Contributions to the list of folders to exclude or include from the Profile Container is needed to improve the list. There are two ways to contribute: Fork the repo , update redirections.csv and create a Pull Request If would prefer not to create a pull request, you can instead create a new issue to request an addition or improvement","title":"Container Redirections"},{"location":"redirectionsxml/#fslogix-profile-containers-redirections","text":"A list of folder redirections for use with FSLogix Profile Containers and a method for generating the list in the expected XML format. See Controlling the Content of the Profile Container for more details. The list of redirections ( Redirections.csv ) is hosted here in CSV format so that it can be rendered in a table when viewed on GitHub and to simplify adding to or updating the list.","title":"FSLogix Profile Containers Redirections"},{"location":"redirectionsxml/#test-before-implementing-in-production","text":"Redirections.csv is not a definitive list of paths to exclude or include in the Profile Container. You should assess each of the paths included in this list for your environment and understand whether a path should be excluded or cleaned up with alternative methods . It is likely that additional paths can be added to the list. With community feedback, this list can be improved. It is also important to understand the performance impacts of implementing exclusions for Profile Containers. Ensure that the redirections.xml that you implement in your environment is well tested before moving into production.","title":"Test Before Implementing in Production"},{"location":"redirectionsxml/#install-the-script","text":"There are two methods for installing the script: Install from the PowerShell Gallery . This is the preferred method as the installation can be handled directly from Windows PowerShell or PowerShell Core with the following command: Install-Script -Name ConvertTo-RedirectionsXml Download from the repository . ConvertTo-RedirectionsXml.ps1 can be downloaded directly from this repository and saved to a preferred location.","title":"Install the Script"},{"location":"redirectionsxml/#usage","text":"ConvertTo-RedirectionsXml is used to convert the CSV list into the correct XML format for use with Profile Containers. This script will read the Redirections.csv from GitHub repo and output Redirections.xml locally for use with Profile Containers. To output Redirections.xml to the current folder, just run the script without arguments. ConvertTo-RedirectionsXml A custom path can be provided for the output file - for example, the following command will output the file to C:\\Temp\\Redirections.xml : ConvertTo-RedirectionsXml -OutFile C :\\ Temp \\ Redirections . xml If you have saved the script locally instead of installing from the PowerShell Gallery, remember to run the script with the correct syntax: .\\ ConvertTo-RedirectionsXml . ps1","title":"Usage"},{"location":"redirectionsxml/#how-to-contribute","text":"Contributions to the list of folders to exclude or include from the Profile Container is needed to improve the list. There are two ways to contribute: Fork the repo , update redirections.csv and create a Pull Request If would prefer not to create a pull request, you can instead create a new issue to request an addition or improvement","title":"How To Contribute"}]}